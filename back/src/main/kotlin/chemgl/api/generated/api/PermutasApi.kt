/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package chemgl.api.generated.api

import chemgl.api.generated.dto.ErrorObjectDto
import chemgl.api.generated.dto.SynthesisRequestDto
import chemgl.api.generated.dto.SynthesizedMoleculeDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
interface PermutasApi {

    @Operation(
        tags = ["Permutas",],
        summary = "Sintetizar moléculas con sustituyentes",
        operationId = "synthesizeMoleculesWithSubstitutes",
        description = """Recibe una molécula principal y una lista de sustituyentes, devolviendo un arreglo con todas las moléculas y sus sustituyentes generados.""",
        responses = [
            ApiResponse(responseCode = "200", description = "Moléculas generadas exitosamente.", content = [Content(array = ArraySchema(schema = Schema(implementation = SynthesizedMoleculeDto::class)))]),
            ApiResponse(responseCode = "400", description = "Error en la solicitud.", content = [Content(schema = Schema(implementation = ErrorObjectDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/synthesizeMoleculesWithSubstitutes"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun synthesizeMoleculesWithSubstitutes(@Parameter(description = "", required = true) @Valid @RequestBody synthesisRequestDto: SynthesisRequestDto): ResponseEntity<List<SynthesizedMoleculeDto>>
}
